# Copyright 1999-2009 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id$

DESCRIPTION="Manage Ruby Rack versions"
MAINTAINER="edward.middleton@vortorus.net"
SVN_DATE='$Date: $'
VERSION=$(svn_date_to_version "${SVN_DATE}" )

RACK="${ROOT}/usr/bin/rackup"

# find a list of rack symlink targets, best first
find_targets() {
	for f in \
			${RACK}-1.3* \
			${RACK}-1.2* \
		; do
		if [[ -f ${f} ]] ; then
			echo $(basename ${f} )
		fi
	done
}

# try to remove the rack symlink
remove_symlink() {
	rm "${RACK}" &>/dev/null
}

# determine the version
get_version() {
	local basename="$(basename $(canonicalise ${RACK} ) )"
	local version=${basename#*-}
	echo ${version}
}

# set the rack symlink
set_symlink() {
	target=${1}
	if is_number "${target}" && [[ ${target} -ge 1 ]] ; then
		targets=( $(find_targets ) )
		target=${targets[$(( ${target} - 1 ))]}
	fi
	if [[ -f "${ROOT}/usr/bin/${target}" ]] ; then
		remove_symlink
		ln -s "${ROOT}/usr/bin/${target}" "${RACK}" || \
			die "Couldn't set ${target} symlink"
	else
		die -q  "Target \"${1}\" doesn't appear to be valid!"
	fi
}

set_symlink_default() {
	set_symlink 1
}

set_symlink_by_slot() {
	slot=${1}
	local target=$(ls  ${RACK}-${slot}* 2>/dev/null)
	if [[ -n ${target}  ]]; then
		remove_symlink
		ln -s ${target} ${RACK}
	else
		die -q "No providers available for slot ${slot}"
	fi
}

### show action ###

describe_show() {
	echo "Manage Ruby Rack versions"
}

do_show() {
	if [[ ${#} -gt 0 ]]; then
		die -q "Usage error. No parameters allowed"
	fi

	write_list_start "Current Ruby Rack version:"
	if [[ -L "${RACK}" ]] ; then
		write_kv_list_entry "$(basename $(canonicalise ${RACK} ) )" ""
	elif [[ -e "${RACK}" ]] ; then
		write_kv_list_entry "(not a symlink)" ""
	else
		write_kv_list_entry "(unset)" ""
	fi
}

### list action ###

describe_list() {
	echo "List available Ruby Rack versions"
}

do_list() {
	if [[ ${#} -gt 0 ]]; then
		die -q "Usage error: no parameters allowed"
	fi

	local i targets
	targets=( $(find_targets) )
	for (( i = 0; i < ${#targets[@]}; i++ )); do
		[[ ${targets[i]} = \
			$(basename "$(canonicalise "${ROOT}/usr/bin/rackup")") ]] \
			&& targets[i]=$(highlight_marker "${targets[i]}")
	done
	write_list_start "Available Ruby Rack versions:"
	write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###

describe_set() {
	echo "Set a new Ruby Rack version"
}

describe_set_options() {
	echo "target : Target name or number (from 'list' action)"
}

describe_set_parameters() {
	echo "<target>"
}

do_set() {
	if [[ $# -gt 1 ]]; then
		die -q "Too many parameters. Expected only 1."
	fi
	local version=${1}
	if [[ -z ${version} ]] ; then
		die -q "You didn't give me a version name"
	elif [[ -L "${RACK}" ]] ; then
		if ! remove_symlink ; then
			die -q "Can't remove existing rack binary"
		elif ! set_symlink "${1}" ; then
			die -q "Can't set new rack binary"
		fi
	elif [[ -e "${RACK}" ]] ; then
		write_warning_msg "Can't set a new rack provider. There's a file in the way at ${RACK}. You can try removing it manually, and then re-running this command."
	else
		set_symlink ${version} || die -q "Wasn't able to set a new provider"
	fi
}

### update action ###

describe_update() {
	echo "Updates the rack symlink to the latest version available"
}

do_update() {
	# Only set a symlink if there are any version of rack present
	local target=1
	local targets=( $(find_targets ) )

	if [[ -z ${targets[@]} ]] ; then
		remove_symlink
	fi

	target=${targets[$(( ${target} - 1 ))]}
	if [[ -f "${ROOT}/usr/bin/${target}" ]] ; then
		set_symlink_default
	fi

	do_show
}

# vim: set ft=eselect :

